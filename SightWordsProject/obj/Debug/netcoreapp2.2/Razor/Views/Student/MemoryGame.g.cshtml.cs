#pragma checksum "/Users/trevormullaney/Documents/CS472/repo/seniorprojectfall2019team9/SightWordsProject/Views/Student/MemoryGame.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e3676de75853287ac8d226fe4ebfdcc2c053a598"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Student_MemoryGame), @"mvc.1.0.view", @"/Views/Student/MemoryGame.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Student/MemoryGame.cshtml", typeof(AspNetCore.Views_Student_MemoryGame))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/trevormullaney/Documents/CS472/repo/seniorprojectfall2019team9/SightWordsProject/Views/_ViewImports.cshtml"
using SightWordsProject;

#line default
#line hidden
#line 2 "/Users/trevormullaney/Documents/CS472/repo/seniorprojectfall2019team9/SightWordsProject/Views/_ViewImports.cshtml"
using SightWordsProject.Models;

#line default
#line hidden
#line 3 "/Users/trevormullaney/Documents/CS472/repo/seniorprojectfall2019team9/SightWordsProject/Views/_ViewImports.cshtml"
using SightWordsProject.ViewModels;

#line default
#line hidden
#line 4 "/Users/trevormullaney/Documents/CS472/repo/seniorprojectfall2019team9/SightWordsProject/Views/_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e3676de75853287ac8d226fe4ebfdcc2c053a598", @"/Views/Student/MemoryGame.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0a60f5c74b5fb0ccb9da513ed896571003f7584a", @"/Views/_ViewImports.cshtml")]
    public class Views_Student_MemoryGame : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 5492, true);
            WriteLiteral(@"<div id=""game""></div>

html, body {
    padding: 0;
    margin: 0;
}
div#game {
    width:100%;
    height:100%;
}

<script>
    var w = window.innerWidth,
            h = window.innerHeight;

    var game = new Phaser.Game(w, h, Phaser.AUTO, 'game',
            { preload: preload, create: create, update: update, render: render });

    function preload() {
        var bmd = game.add.bitmapData(100,100);
        bmd.ctx.fillStyle = '#00ff00';
        bmd.ctx.arc(50,50,50, 0, Math.PI * 2);
        bmd.ctx.fill();
        game.cache.addBitmapData('good', bmd);

        var bmd = game.add.bitmapData(64,64);
        bmd.ctx.fillStyle = '#ff0000';
        bmd.ctx.arc(32,32,32, 0, Math.PI * 2);
        bmd.ctx.fill();
        game.cache.addBitmapData('bad', bmd);
    }

    var good_objects,
            bad_objects,
            slashes,
            line,
            scoreLabel,
            score = 0,
            points = [];	

    var fireRate = 1000;
    var nextFire = 0;


    function create() {

        game.ph");
            WriteLiteral(@"ysics.startSystem(Phaser.Physics.ARCADE);
        game.physics.arcade.gravity.y = 300;

        good_objects = createGroup(4, game.cache.getBitmapData('good'));
        bad_objects = createGroup(4, game.cache.getBitmapData('bad'));

        slashes = game.add.graphics(0, 0);

        scoreLabel = game.add.text(10,10,'Tip: get the green ones!');
        scoreLabel.fill = 'white';

        emitter = game.add.emitter(0, 0, 300);
        emitter.makeParticles('parts');
        emitter.gravity = 300;
        emitter.setYSpeed(-400,400);

        throwObject();
    }

    function createGroup (numItems, sprite) {
        var group = game.add.group();
        group.enableBody = true;
        group.physicsBodyType = Phaser.Physics.ARCADE;
        group.createMultiple(numItems, sprite);
        group.setAll('checkWorldBounds', true);
        group.setAll('outOfBoundsKill', true);
        return group;
    }

    function throwObject() {
        if (game.time.now > nextFire && good_objects.countDead()>0 && bad_objects.");
            WriteLiteral(@"countDead()>0) {
            nextFire = game.time.now + fireRate;
            throwGoodObject();
            if (Math.random()>.5) {
                throwBadObject();
            }
        }
    }

    function throwGoodObject() {
        var obj = good_objects.getFirstDead();
        obj.reset(game.world.centerX + Math.random()*100-Math.random()*100, 600);
        obj.anchor.setTo(0.5, 0.5);
        //obj.body.angularAcceleration = 100;
        game.physics.arcade.moveToXY(obj, game.world.centerX, game.world.centerY, 530);
    }

    function throwBadObject() {
        var obj = bad_objects.getFirstDead();
        obj.reset(game.world.centerX + Math.random()*100-Math.random()*100, 600);
        obj.anchor.setTo(0.5, 0.5);
        //obj.body.angularAcceleration = 100;
        game.physics.arcade.moveToXY(obj, game.world.centerX, game.world.centerY, 530);
    }

    function update() {
        throwObject();

        points.push({
            x: game.input.x,
            y: game.input.y
        });
        poi");
            WriteLiteral(@"nts = points.splice(points.length-10, points.length);
        //game.add.sprite(game.input.x, game.input.y, 'hit');

        if (points.length<1 || points[0].x==0) {
            return;
        }

        slashes.clear();
        slashes.beginFill(0xFFFFFF);
        slashes.alpha = .5;
        slashes.moveTo(points[0].x, points[0].y);
        for (var i=1; i<points.length; i++) {
            slashes.lineTo(points[i].x, points[i].y);
        } 
        slashes.endFill();

        for(var i = 1; i< points.length; i++) {
            line = new Phaser.Line(points[i].x, points[i].y, points[i-1].x, points[i-1].y);
            game.debug.geom(line);

            good_objects.forEachExists(checkIntersects);
            bad_objects.forEachExists(checkIntersects);
        }
    }

    var contactPoint = new Phaser.Point(0,0);

    function checkIntersects(fruit, callback) {
        var l1 = new Phaser.Line(fruit.body.right - fruit.width, fruit.body.bottom - fruit.height, fruit.body.right, fruit.body.bottom);
        va");
            WriteLiteral(@"r l2 = new Phaser.Line(fruit.body.right - fruit.width, fruit.body.bottom, fruit.body.right, fruit.body.bottom-fruit.height);
        l2.angle = 90;

        if(Phaser.Line.intersects(line, l1, true) ||
            Phaser.Line.intersects(line, l2, true)) {

            contactPoint.x = game.input.x;
            contactPoint.y = game.input.y;
            var distance = Phaser.Point.distance(contactPoint, new Phaser.Point(fruit.x, fruit.y));
            if (Phaser.Point.distance(contactPoint, new Phaser.Point(fruit.x, fruit.y)) > 110) {
                return;
            }

            if (fruit.parent == good_objects) {
                killFruit(fruit);
            } else {
                resetScore();	
            }
        }

    }

    function resetScore() {
        var highscore = Math.max(score, localStorage.getItem(""highscore""));
        localStorage.setItem(""highscore"", highscore);

        good_objects.forEachExists(killFruit);
        bad_objects.forEachExists(killFruit);

        score = 0;
       ");
            WriteLiteral(@" scoreLabel.text = 'Game Over!\nHigh Score: '+highscore;
        // Retrieve
    }

    function render() {
    }

    function killFruit(fruit) {

        emitter.x = fruit.x;
        emitter.y = fruit.y;
        emitter.start(true, 2000, null, 4);
        fruit.kill();
        points = [];
        score++;
        scoreLabel.text = 'Score: ' + score;
    }

</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
