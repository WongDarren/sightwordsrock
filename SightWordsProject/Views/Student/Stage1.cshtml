@model List<Game> 

@{
    ViewData["Title"] = "Home Page";
}

<style>
    @@import url('https://fonts.googleapis.com/css?family=DM+Sans:400,500,700&display=swap');

* {
  box-sizing: border-box;
}

body {
  font-family: 'DM Sans', sans-serif;
  overflow: hidden;
}

.project {
  height: 120px;
  width: 120px;
  flex-shrink: 0;
  background-color: white;
  border-radius: 50%;
  border-style: solid;
  border-width: thick;
  user-select: none;
  cursor: pointer;

  position: relative;
  z-index: 1;
  transform-origin: center;
}

.project-img {
  object-fit: contain;
  display: block;
  user-select: none;
  pointer-events: none;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  transition: .5s;
}

.header-project {
  position: fixed;
  top: 20px;
  height: 150px;
}

.score-project {
  position: fixed;
  right: 10%;
  top: 20px;
  width: 200px;
  height: 90px;
  color: darken(#ddd, 15%);
  transition: .5s;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 15px;
  font-weight: 500;
  padding: 10px;
  user-select: none;
}

.project-name {
  position: absolute;
  width: 140px;
  text-align: center;
  left: 50%;
  top: 100%;
  font-size: 14px;
  transition: .3s;
  font-weight: 500;
  color: rgba(0,0,0,.5);
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transform: translateX(-50%) translateY(0) scale(.8);
  z-index: -1;
  
  @@media (max-width: 768px) { display: none; }
}

.project:hover { z-index: 2; }

.project:hover > .project-name {
  opacity: 1;
  visibility: visible;
  transform: translateX(-50%) translateY(10px) scale(1);
}

.project.is-selected { z-index: 2; }
.project.is-selected > .project-img { box-shadow: 0 0 0 6px #1089ff; }

.showcase.is-dragging .project {
  pointer-events: none;
  transition: none;
}

.showcase.is-dragging .drop {
  border-color: #1089ff;
  color: #1089ff;
}

.drop {
  position: fixed;
  bottom: 20px;
  left: calc(50% - 45px);
  width: 150px;
  height: 150px;
  color: darken(#ddd, 15%);
  border-radius: 50%;
  transition: .5s;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 15px;
  font-weight: 500;
  user-select: none;
}

.drop.is-ready {
  transform: scale(1.3);
}


.drop.is-dropped {
  z-index: 3;
  color: #fff;
  font-size: 12px;
  width: 64px;
  height: 64px;
  left: calc(50% - 32px);
  cursor: pointer;
}

.project.is-expanded > .project-img { border-radius: 50%; }
.project.is-expanded > .project-name { display: none; }

.showcase {
  height: 100vh;
  overflow: hidden;
  justify-content: space-evenly;
  align-items: center;
  display: flex;
  background-image: url("/img/field.png");
  background-position: center; /* Center the image */
  background-repeat: no-repeat; /* Do not repeat the image */
  background-size: cover; /* Resize the background image to cover the entire container */
}

/*
expanding css
.showcase.is-preview > .project {
  pointer-events: none;
  opacity: 0;
  width: 0;
  height: 0;
  margin: 0;
}

.showcase.is-preview > .project.is-expanded {
  opacity: 1;
  transition: .7s;
  z-index: 2;
  width: 50%;
  height: 50%;
  transform: none !important;
  z-index: 2;
}
*/


.centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*
  width: 100%;
  height: 50%;
  border-radius: 50%;
  display: block;
  */
  object-fit: cover;
  object-position: center;
  
  user-select: none;
  pointer-events: none;
  text-align: center;
  transition: .5s;

}

.speaker{
  height: 100%;
  cursor: pointer;
}

/* The Modal (background) A.K.A POP UP*/
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  padding-top: 100px; /* Location of the box */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

.rockGrad {
  height: 100px;
}

/* The Close Button */
.close {
  color: #aaaaaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}



</style>

<div class="showcase">
  <div class="header-project">
    <img class="speaker" src="/img/rockHappy.png" onclick=window.speechSynthesis.speak(msg2)>
    
    <!--Make .speaker able to say word when clicked-->
  </div>
  <div class="score-project">
    <h2 id="myScore">My Score: 0</h2>
  </div>
  <div class="project">
    <img class="project-img">
      <div class="centered"><h4 id = "box1">1st word</h4></div>
    <span class="project-name">Drag to the Basket!</span>
  </div>
  <div class="project">
    <img class="project-img">
      <div class="centered"><h4 id = "box2">2nd word</h4></div>
    <span class="project-name">Drag to the Basket!</span>
  </div>
  <div class="project">
    <img class="project-img">
      <div class="centered"><h4 id = "box3">3rd word</h4></div>
    <span class="project-name">Drag to the Basket!</span>
  </div>
  <div class="project">
    <img class="project-img">
      <div class="centered"><h4 id = "box4">4th word</h4></div>
    <span class="project-name">Drag to the Basket!</span>
  </div>
  
  <div class="drop">
    <img style="height:100%" src="/img/basket.png">
  </div>
  <!-- The Modal -->
<div id="myModal" class="modal">

  <!-- Modal content -->
  <div class="modal-content text-center">
    <div class="modal-header" style="margin:0 auto">
      <h2>Congratulations!</h2>
    </div>
    <div class="modal-body">
      <img class="rockGrad mb-2" src="/img/rockGrad.png">
      <p>You made it!</p>
      <p>TODO: get score here</p>
    </div>
    <div class="modal-footer">
      <!--TODO: Need to redirect the student back when they finish the game-->
      <button type="button" class="btn btn-success" style="margin:0 auto" onclick="">Click Me!</button>
    </div>
  </div>

</div>
  
</div>

<script>
var msg = new SpeechSynthesisUtterance('Hello World');
var msg2 = new SpeechSynthesisUtterance('I am a rock');

const projects = document.querySelectorAll(".project");
const drop = document.querySelector(".drop");
const showcase = document.querySelector(".showcase");

// The array of words should be passed here
// j for array only
var x = 0;
var j = 0;
var model = @Html.Raw(Json.Serialize(Model));
var words = [];
for (i=0;i<model.length;i++) {
  words.push(model[i].words);
}
var tmpWords = words;
var answer;
shuffle(words);
wordGenerator();

// wordGenerator() change words from id=box1 to box4
// i for graphical container
var score = 0;
let start,
  offsetY,
  offsetX,
  targetRect,
  target,
  dropped = false,
  expanded = false;

const stopped = () => {
  start = false;
  if (target) {
    showcase.classList.remove("is-dragging");
    target.classList.remove("is-selected");
    drop.classList.remove("is-active");
    drop.classList.remove("is-ready");
  }
  if (dropped) {
    //showcase.classList.add("is-preview");
    target.classList.add("is-expanded");
    drop.classList.add("is-dropped");
    expanded = true;

    console.log(getProjectName(target));
    console.log("projectName", getProjectName(target));
    console.log(answer);
    if(getProjectName(target) === answer){
      score_f();
    }
    wordGenerator();
    
  } else {
    drop.classList.remove("is-dropped");
    showcase.classList.remove("is-preview");
    target.classList.remove("is-expanded");
    expanded = false;
  }
};

const started = (e, type) => {
  start = true;
  target = e.target;
  if (type === "touch") {
    console.log(e.touches[0]);
    offsetY = target.offsetWidth / 2 + target.offsetTop;
    offsetX = target.offsetWidth / 2 + target.offsetLeft;
  } else {
    offsetY = e.offsetY + target.offsetTop;
    offsetX = e.offsetX + target.offsetLeft;
  }
  targetRect = target.getBoundingClientRect();
  target.classList.add("is-selected");
  showcase.classList.add("is-dragging");
};

projects.forEach(project => {
  project.addEventListener("mousedown", e => {
    started(e, "mouse");
  });
  project.addEventListener("touchstart", e => {
    started(e, "touch");
  });
});

const docUp = () => {
  if (!expanded && target) {
    stopped();
  }
};

document.addEventListener("mouseup", () => {
  docUp();
});
document.addEventListener("touchend", () => {
  docUp();
});

const docMove = (e, type) => {
  let clientX = 0,
    clientY = 0;

  if (type === "touch") {
    clientX = e.touches[0].clientX;
    clientY = e.touches[0].clientY;
  } else {
    clientX = e.clientX;
    clientY = e.clientY;
  }

  if (
    clientY > drop.offsetTop &&
    clientY < drop.offsetTop + drop.offsetHeight &&
    clientX > drop.offsetLeft &&
    clientX < drop.offsetLeft + drop.offsetWidth &&
    start &&
    !expanded
  ) {
    drop.classList.add("is-ready");
    dropped = true;
  } else {
    drop.classList.remove("is-ready");
    dropped = false;
  }

  if (start && !expanded) {
    target.style.transform = `translateY(${clientY -
      offsetY}px) translateX(${clientX - offsetX}px)`;
  }
};

document.addEventListener("mousemove", e => {
  docMove(e, "mouse");
});
document.addEventListener("touchmove", e => {
  docMove(e, "touch");
});

drop.addEventListener("mouseout", () => {
  if (expanded) {
    //window.speechSynthesis.speak(msg);
    dropped = false;
    target.style.transform = "none";
    stopped();
  }
});

function score_f(){
  score = score + 1;
  document.getElementById("myScore").innerHTML = "My Score: " + score;
}
function shuffle(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
function wordGenerator(){

    answer = tmpWords[x];
    var arr= [];
    for (i=0;i < words.length; i++)
    {
      if (answer != words[i])
      {
        arr.push(words[i]);
        //arr = words[i];
      }
    }
    var result = getRandom(arr,3);
    result.push(answer);
    shuffle(result);
    //var arrTmp = [words[j], words[j+1], words[j+2], words[j+3]];
    //answer = arrTmp[Math.floor(Math.random()*arrTmp.length)];
    msg2 = new SpeechSynthesisUtterance(answer);

    document.getElementById("box1").innerHTML = result[0];
    document.getElementById("box2").innerHTML = result[1];
    document.getElementById("box3").innerHTML = result[2];
    document.getElementById("box4").innerHTML = result[3];
    x=x+1;
    //j=j+4;
    if(x > words.length){
      modal.style.display = "block";
    }
}

function getRandom(arr, n) {
    var result = new Array(n),
        len = arr.length,
        taken = new Array(len);
    if (n > len)
        throw new RangeError("getRandom: more elements taken than available");
    while (n--) {
        var x = Math.floor(Math.random() * len);
        result[n] = arr[x in taken ? taken[x] : x];
        taken[x] = --len in taken ? taken[len] : len;
    }
    return result;
}

getProjectName = target => target.querySelector('h4').textContent;

// pop up part
// Get the modal
var modal = document.getElementById("myModal");

// Get the button that opens the modal
var btn = document.getElementById("myBtn");

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks the button, open the modal 
btn.onclick = function() {
  modal.style.display = "block";
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
  modal.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
/*
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}
*/
</script>